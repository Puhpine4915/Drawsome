@{
    Layout = null;
    var username = Context.Session.GetString("Username");
    var lobby = Drawsome.Hubs.LobbyHub.Lobbies.FirstOrDefault(l => l.Key == ViewBag.LobbyName).Value;
    var isCreator = lobby?.Players.FirstOrDefault() == username;
}

<!DOCTYPE html>
<html lang="en">
<head>
    <title>Active Lobby</title>
    <link rel="stylesheet" href="~/css/style.css" />
    <script src="~/js/signalR.js"></script>
</head>
<body>
    <div class="login-container">
        <h2>Lobby: @ViewBag.LobbyName</h2>
        <h3>Players:</h3>
        <ul id="playerList"></ul>
        <button onclick="leaveLobby()">Leave Lobby</button>
    </div>

    <div id="shadowHostContainer"></div>

    <script>
        let connection;
        const lobbyName = "@ViewBag.LobbyName";
        const username = "@Context.Session.GetString("Username")";
        const isCreator = @(isCreator ? "true" : "false");
        let canvas, context;
        let drawing = false;
        let sendTimer;

        const startConnection = async () => {
            connection = new signalR.HubConnectionBuilder()
                .withUrl("/lobbyHub")
                .build();

            try {
                await connection.start();
                console.log("SignalR Connected.");
            } catch (err) {
                console.error(err.toString());
            }

            connection.on("UpdatePlayers", (players) => {
                const playerList = document.getElementById("playerList");
                playerList.innerHTML = "";
                players.forEach(player => {
                    const li = document.createElement("li");
                    li.textContent = player;
                    playerList.appendChild(li);
                });
            });

            connection.on("ReceiveDrawing", (drawingData) => {
                if (!isCreator) {
                    drawReceivedData(drawingData);
                }
            });

            connection.invoke("JoinLobby", lobbyName, username).catch(err => console.error(err.toString()));

            if (isCreator) {
                setupCreatorCanvas();
            } else {
                setupViewCanvas();
            }
        }

        function setupShadowDOM(canvasId) {
            const host = document.getElementById("shadowHostContainer");
            const shadowRoot = host.attachShadow({ mode: "open" });

            shadowRoot.innerHTML = `
                <style>
                    canvas {
                        border: 1px solid black;
                        display: block;
                        margin-top: 10px;
                    }
                </style>
                <canvas id="${canvasId}" width="400" height="300"></canvas>
            `;

            return shadowRoot.getElementById(canvasId);
        }

        function setupCreatorCanvas() {
            canvas = setupShadowDOM("drawingCanvas");
            context = canvas.getContext("2d");

            canvas.addEventListener("mousedown", startDrawing);
            canvas.addEventListener("mouseup", stopDrawing);
            canvas.addEventListener("mousemove", draw);
        }

        function setupViewCanvas() {
            canvas = setupShadowDOM("viewCanvas");
            context = canvas.getContext("2d");
        }

        function startDrawing(e) {
            drawing = true;
            draw(e);
        }

        function stopDrawing() {
            drawing = false;
            context.beginPath();
        }

        function draw(e) {
            if (!drawing) return;

            context.lineWidth = 2;
            context.lineCap = "round";
            context.strokeStyle = "black";

            context.lineTo(e.offsetX, e.offsetY);
            context.stroke();
            context.beginPath();
            context.moveTo(e.offsetX, e.offsetY);

            clearTimeout(sendTimer);
            sendTimer = setTimeout(function(){
                sendDrawingData(canvas.toDataURL());
            },100);
        }

        function sendDrawingData(drawingData) {
            if (connection) {
                connection.invoke("SendDrawing", lobbyName, drawingData).catch(err => console.error(err.toString()));
            }
        }

        function drawReceivedData(drawingData) {
            const image = new Image();
            image.onload = () => {
                context.drawImage(image, 0, 0);
            };
            image.src = drawingData;
        }

        function leaveLobby() {
            if (connection) {
                connection.invoke("LeaveLobby", lobbyName, username)
                    .then(() => {
                        window.location.href = "/Home/LobbySelection";
                    })
                    .catch(err => console.error(err.toString()));
            } else {
                console.error("SignalR connection not established.");
            }
        }

        window.addEventListener('beforeunload', function (e) {
            if(connection){
                connection.invoke("LeaveLobby", lobbyName, username).catch(err => console.error(err.toString()));
            }
        });

        connection?.onclose(async () => {
            console.log("Connection closed, trying to reconnect...");
            await startConnection();
        });

        startConnection();
    </script>
</body>
</html>
